name: Accessibility Manual Tests (Playwright)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  a11y-tests:
    name: Manual accessibility tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Get Vercel preview URL
        id: vercel
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const vercelComment = comments.data.find(c =>
              c.user?.login === 'vercel[bot]' && c.body?.includes('Visit Preview')
            );

            if (vercelComment) {
              const match = vercelComment.body.match(/\[Visit Preview\]\((.*?)\)/);
              if (match) {
                core.setOutput('preview-url', match[1]);
              }
            }

      - name: Run Playwright manual a11y tests
        id: playwright
        env:
          PREVIEW_URL: ${{ steps.vercel.outputs.preview-url }}
        run: |
          mkdir -p results
          npx playwright test --project=chromium | tee results/manual-a11y.log

      - name: Clean ANSI and extract test summary
        run: |
          npm install strip-ansi-cli
          tail -n 30 results/manual-a11y.log | npx strip-ansi-cli > results/manual-summary.txt
          echo '### üìã R√©sum√© des tests :' > results/manual-comment.md
          echo '```' >> results/manual-comment.md
          cat results/manual-summary.txt >> results/manual-comment.md
          echo '```' >> results/manual-comment.md

      - name: R√©sum√© dans GitHub Actions
        if: always()
        run: |
          echo "## ‚úÖ R√©sultats des tests Playwright personnalis√©s" >> $GITHUB_STEP_SUMMARY
          if test -f results/manual-summary.txt; then
            echo "### üîé Rapport Playwright" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat results/manual-summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è R√©sum√© non g√©n√©r√©" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        with:
          name: playwright-manual-log
          path: results/manual-a11y.log

      - name: Comment (or update) PR with manual accessibility results
        if: github.event.pull_request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const runId = process.env.GITHUB_RUN_ID;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const vercelUrl = process.env.PREVIEW_URL || '${{ steps.vercel.outputs.preview-url }}';
            const reportPath = 'results/manual-comment.md';

            let summary = '';
            try {
              summary = fs.readFileSync(reportPath, 'utf8');
            } catch (e) {
              summary = '‚ö†Ô∏è *Erreur lors de la lecture du fichier Markdown g√©n√©r√© (`manual-comment.md`).*';
            }

            const body = [
              '<!-- manual-a11y-report -->', // üè∑Ô∏è ancre unique
              '## ‚úÖ R√©sultats des tests Playwright personnalis√©s',
              '',
              `üîó **URL test√©e** : [${vercelUrl}](${vercelUrl})`,
              '',
              `üìÑ **Ex√©cution compl√®te** : [Artefacts GitHub Actions](https://github.com/${owner}/${repo}/actions/runs/${runId})`,
              '',
              '---',
              '',
              summary
            ].join('\n');

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
              per_page: 100
            });

            const existing = comments.find(c =>
              c.user?.type === 'Bot' &&
              c.body?.includes('<!-- manual-a11y-report -->')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body
              });
              core.info(`Commentaire manual-a11y mis √† jour (#${existing.id})`);
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
              core.info('Nouveau commentaire manual-a11y cr√©√©');
            }
