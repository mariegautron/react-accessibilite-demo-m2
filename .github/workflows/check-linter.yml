name: Check ‚Äì Lint

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (non-blocking)
        id: eslint
        run: |
          echo "::group::ESLint"
          npx eslint . --ext .ts,.tsx > eslint-output.txt || true
          echo "::endgroup::"

      - name: Comment (or update) PR with lint summary
        if: github.event.pull_request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const readOutput = (file, title) => {
              const content = fs.existsSync(file) ? fs.readFileSync(file, 'utf8').trim() : '';
              return content
                ? `### ‚ùå ${title} found issues:\n\n\`\`\`\n${content.slice(0, 3000)}\n\`\`\`\n`
                : `### ‚úÖ ${title} passed without issues.\n`;
            };

            const eslint = readOutput('eslint-output.txt', 'ESLint');

            const body = [
              '<!-- lint-check -->',
              '## üõ† R√©sultats des v√©rifications :',
              '',
              eslint,
              '\n_Note : les erreurs n‚Äôemp√™chent pas le merge, mais merci de les corriger._'
            ].join('\n');

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
              per_page: 100
            });

            const existing = comments.find(c =>
              c.user?.type === 'Bot' &&
              c.body?.includes('<!-- lint-check -->')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body
              });
              core.info(`Commentaire Lint mis √† jour (#${existing.id})`);
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
              core.info('Nouveau commentaire Lint cr√©√©');
            }
